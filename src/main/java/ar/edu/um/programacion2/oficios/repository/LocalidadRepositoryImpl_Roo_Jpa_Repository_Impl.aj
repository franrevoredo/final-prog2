// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.oficios.repository;

import ar.edu.um.programacion2.oficios.reference.Localidad;
import ar.edu.um.programacion2.oficios.reference.QLocalidad;
import ar.edu.um.programacion2.oficios.repository.LocalidadRepositoryCustom;
import ar.edu.um.programacion2.oficios.repository.LocalidadRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LocalidadRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: LocalidadRepositoryImpl implements LocalidadRepositoryCustom;
    
    declare @type: LocalidadRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalidadRepositoryImpl.NOMBRE = "nombre";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalidadRepositoryImpl.DESCRIPCION = "descripcion";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Localidad> LocalidadRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLocalidad localidad = QLocalidad.localidad;
        
        JPQLQuery<Localidad> query = from(localidad);
        
        Path<?>[] paths = new Path<?>[] {localidad.nombre,localidad.descripcion};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, localidad.nombre)
			.map(DESCRIPCION, localidad.descripcion);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, localidad);
    }
    
}
