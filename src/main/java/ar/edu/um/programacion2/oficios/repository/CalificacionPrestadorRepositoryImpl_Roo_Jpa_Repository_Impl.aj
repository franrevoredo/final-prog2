// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.oficios.repository;

import ar.edu.um.programacion2.oficios.domain.CalificacionPrestador;
import ar.edu.um.programacion2.oficios.domain.QCalificacionPrestador;
import ar.edu.um.programacion2.oficios.repository.CalificacionPrestadorRepositoryCustom;
import ar.edu.um.programacion2.oficios.repository.CalificacionPrestadorRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CalificacionPrestadorRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CalificacionPrestadorRepositoryImpl implements CalificacionPrestadorRepositoryCustom;
    
    declare @type: CalificacionPrestadorRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CalificacionPrestadorRepositoryImpl.COMENTARIO = "comentario";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CalificacionPrestadorRepositoryImpl.TIPO = "tipo";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CalificacionPrestador> CalificacionPrestadorRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCalificacionPrestador calificacionPrestador = QCalificacionPrestador.calificacionPrestador;
        
        JPQLQuery<CalificacionPrestador> query = from(calificacionPrestador);
        
        Path<?>[] paths = new Path<?>[] {calificacionPrestador.comentario,calificacionPrestador.tipo};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(COMENTARIO, calificacionPrestador.comentario)
			.map(TIPO, calificacionPrestador.tipo);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, calificacionPrestador);
    }
    
}
