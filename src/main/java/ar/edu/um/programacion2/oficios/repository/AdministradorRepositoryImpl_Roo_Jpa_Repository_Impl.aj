// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.oficios.repository;

import ar.edu.um.programacion2.oficios.domain.Administrador;
import ar.edu.um.programacion2.oficios.domain.QAdministrador;
import ar.edu.um.programacion2.oficios.repository.AdministradorRepositoryCustom;
import ar.edu.um.programacion2.oficios.repository.AdministradorRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AdministradorRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: AdministradorRepositoryImpl implements AdministradorRepositoryCustom;
    
    declare @type: AdministradorRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdministradorRepositoryImpl.USERNAME = "username";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdministradorRepositoryImpl.PASSWORD = "password";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdministradorRepositoryImpl.EMAIL = "email";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdministradorRepositoryImpl.TELEFONO = "telefono";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Administrador> AdministradorRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAdministrador administrador = QAdministrador.administrador;
        
        JPQLQuery<Administrador> query = from(administrador);
        
        Path<?>[] paths = new Path<?>[] {administrador.username,administrador.password,administrador.email,administrador.telefono};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(USERNAME, administrador.username)
			.map(PASSWORD, administrador.password)
			.map(EMAIL, administrador.email)
			.map(TELEFONO, administrador.telefono);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, administrador);
    }
    
}
